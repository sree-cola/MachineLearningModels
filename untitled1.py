# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I9_61aOmQ2aZXJ00_fTUk0egCmomK-9Y
"""

#LINEAR REGRESSION(REGRESSION)-SUPERVISED LERANING TECHNIQUE
#DATASET - AREA VS PRICES

#UNIVARIENT LINEAR REGRESSION(SINGLE LINEAR REGRESSION)
#IMAGINARY STORY:IMAGINE A REAL ESTATE OR BROKER COMES TO YOU AND GIVE SYOU THE BELOW DATASET AND SAYS
#CREATE A MODEL FOR ME WHICH COULD PREDICT THE PROPERTY PRICES BASED ON THE DATA I GAVE

#1.TAKE DATA AND CREATE DATAFRAME
import pandas as pd
df=pd.read_csv('https://raw.githubusercontent.com/ameenmanna8824/DATASETS/main/areavsprices.csv')
df

#3.DATA VISUALIZATION
import matplotlib.pyplot as plt
#plt.plot(x-axis,y-axis)
plt.plot(df['Area'],df['Prices'])

#divide data into i/p and o/p
#So we can consider area column as input
#Input is always 2D array
#x=df.iloc[:,0:1].values -only:in rows's place means select all rows and only 0:1 columns
#In column's place,if there is a only colen,then array is 2d dimensional
x=df.iloc[0:6,0:1].values #.values creats column into an array
x

#we consider Prices columns as ouput
#Output should be 1D array
y=df.iloc[:,1].values
y

#Step no 5 and step no 6,we are not doing for this model

#7.Run a Classifier/Regressor/Cluster
#sklearn.linear_model - package(collection of libaries),LinearRegression -Library
from sklearn.linear_model import LinearRegression
model = LinearRegression()#We have put the LinearRegression li#8.PReb inside variable model

#Fit the model(Map inputs with the outputs)
#LinearRegression.fit(x,y)
model.fit(x,y)#Mapping the values of x and y inside the LinearRegression Library

#8.Predict the output
y_pred=model.predict(x)#Using the input values,we predict the output
y_pred#predicted output

y#actual output

#So when we to compare Y_pred and y and find out that there is a huge difference
#this does not mean that my model has predicted wrong values
#It only means that our model is NOT Linear
#Linearity of the model depends on nature of the data which we have as well size of the data.

model.predict([[1700]])#for 1700 sqft we check the average price

#Cross Verification Technique
#y=mx +c #Equation of a straight line
m=model.coef_ #value of slope
m

c=model.intercept_#it gives the value y intercept
c

#y=mx+c
m*1700+c

#VISUALIZATION FOR BEST LINE
plt.title('Best fit LINE')
plt.xlabel('Area')
plt.ylabel('PRICE')
plt.scatter(x,y)#actual
plt.plot(x,y_pred,c='orange')#predicted

#MODEL 2-LINEAR REGRESSION(WE CREATE OUR OWN DATASET)
import numpy as np
experience=np.arange(1,11)#It will print numbers from 1 to 10 in array
np.random.seed(35)
salary = np.random.randint(20000,100000,10)
salary = np.sort(salary)#It sorts in ascending order
print(experience)
print(salary)

#divide data into input and output
#experience -input
#salary -output
#input is always 2dimensional
x=experience.reshape(-1,1)#converts 1d to 2d
x

x.ndim

y=salary
y

from sklearn.linear_model import LinearRegression
model1=LinearRegression()
#We have put the LinearRegression li
#8.PReb inside variable model

#Fit the model(Map inputs with the outputs)
#LinearRegression.fit(x,y)
model1.fit(x,y)#Mapping the values of x and y inside the LinearRegression Library

#8.Predict the output
y_pred=model1.predict(x)#Using the input values,we predict the output
y_pred#predicted output

y#actual output

model1.predict([[2.5]])

m=model1.coef_
c=model1.intercept_

#y=mx+c
m*2.5+c

plt.scatter(x,y)
plt.ylabel('Salary')
plt.title('WORK LIFE')
plt.xlabel('Experience')
plt.plot(x,y_pred,c='orange')

#SCALING/NORMALIZATION-Step 6 in MACHINE LEARNING STEPS
#1.BEFORE NORMALIZATION
import numpy as np
import matplotlib.pyplot as plt
np.random.seed(0)#to keep the values constant
x1=np.random.randint(1,15,30)
x1=np.sort(x1)
x2=np.random.randint(10000,70000,30)

plt.plot(x1,x2)

#NOTE:These Graphs or Formulas are nowhere related to machine learning
#Here we are only visualizing as to how Normalization/Scaling works only on INPUT
#2.After normalization
x1min=min(x1)
x1max=max(x1)
x2min=min(x2)
x2max=max(x2)
x1norm=(x1-x1min)/(x1max - x1min)
x2norm=(x2-x2min)/(x2max - x2min)

plt.plot(x1norm,x2norm)

#MULTIPLE LINEAR REGRESSION/MULTIVARATE REGRESSION
#DATASET - cars Price Assignment
#1.TAKE DATA AND CREATE DATAFRAME
import pandas as pd
df=pd.read_csv('https://raw.githubusercontent.com/ameenmanna8824/DATASETS/main/CarPrice_Assignment.csv')
df

df.info()

#Visualization
import seaborn as sns
sns.distplot(df['price'])

#NOW we will be creating a new df with only numeric values
df_numeric=df.select_dtypes(include=['float64','int64'])
df_numeric

#dropping the car Id and Symboling column
df_numeric=df_numeric.drop(['symboling','car_ID'],axis=1)#axis =1 means columns

df_numeric

df_numeric.info()

#input -all the columns except Price
#output-considered as price

#4.divide data into input and output
x=df_numeric.iloc[:,0:13].values
x

y=df_numeric.iloc[:,-1].values
y

#5.Train and test variables
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,random_state=0)
#train-75%,test=25%

print(x.shape)
print(x_train.shape)
print(x_test.shape)

print(y.shape)
print(y_train.shape)
print(y_test.shape)

#6.NORMALIZATION OR SCALING
#(For only inputs)
from sklearn.preprocessing import MinMaxScaler
scaler=MinMaxScaler()
x_train=scaler.fit_transform(x_train)
x_test=scaler.fit_transform(x_test)

#RUN A CLASSIFIER/REGRESSOR/CLUSTERE
from sklearn.linear_model import LinearRegression
model=LinearRegression()

#8.Fitting the model
model.fit(x_train,y_train)#Here we are fitting the training data

#predict the output/Predictor variable
y_pred=model.predict(x_test)#using the input testing values we predict the output
y_pred

y_test#actual output values

#INDIVUAL PREDICTION
print(x_train[10])

model.predict([x_train[10]])

model.predict([[0.28862974, 0.48503937 ,0.07070707 ,0.525,0.280068,0.15625,0.41964286,0.61437908,0.125,0.16190476,0.67346939,0.38888889,0.44736842]])

