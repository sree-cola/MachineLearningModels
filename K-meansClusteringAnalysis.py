# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BIXm5XA8ckM1QLSOt8SGW9xFrZshYvWf
"""

#Clustering -K MEANS CLUSTERING
#UNSUPERVISED LEARNING
#In clustering there in no intial ouptut(y),x is into consideration
#In K means ,k is number of clustters

#Create DataFrame
import pandas as pd
df=pd.read_csv('https://raw.githubusercontent.com/ameenmanna8824/DATASETS/main/Mall_Customers.csv')
df

df.info()

df.shape

#divide the data into input
#We will consider Annual income and spending score as input
x=df.iloc[:,3:5].values
x

#Visualization
import matplotlib.pyplot as plt
plt.scatter(df['Annual Income (k$)'],df['Spending Score (1-100)'])
#So here we have only 1 cluster

import numpy as np
np.sqrt(200)
#Our numbers of clusters(k) should not exceed the sqrt of total number of points
#So our cluster is in the range of 2,14

#Now to find the value of k,we got 2 methods
#1.Elbow method-confusing
#2.SILHOUETTE SCORE-very accurate

#ELBOW METHOD
from sklearn.cluster import KMeans
k=range(2,15)

sse=[]#Sum of Squared Error  -Empty list
#for i in range of(2,15)
for i in k:
  model_demo=KMeans(n_clusters= i,random_state=0)
  model_demo.fit(x)
  sse.append(model_demo.inertia_)#.interia_calculates the SSE
plt.scatter(k,sse)
plt.plot(k,sse)
#Check,at which point the elbow graph is more Prominent

#SO from elbow method,let us consider k=5 is the most promient point

from sklearn.metrics import silhouette_score
k=range(2,15)
for i in k:
  model_demo=KMeans(n_clusters=i,random_state=0)
  model_demo.fit(x)
  y_pred=model_demo.predict(x)
  print(f'{i}CLUSTERS,Score-{silhouette_score(x,y_pred)}')
  plt.bar(i,silhouette_score(x,y_pred))

#AFTER the SILOUTTE/REGRESSOR/CLUSTERE
#THE NUMBER OF CLUSTERS TO BE CONSIDERE AS 5

#AFPPLY the SILOUTTE/REGRESSOR/CLUSTERE
k=5
from sklearn.cluster import KMeans
model=KMeans(n_clusters=5,random_state=0)
model.fit(x)

#predict the ouput
y=model.predict(x)
y

y.size #total number of points

#Let us just check which cluster have got how many values
np.unique(y,return_counts=True)

x[y==1,1]
#the first '1'-cluster number,second '1' is the column index number
#the value of input when cluster 1 is selected and column1 is selected

plt.figure(figsize =(16,8))
for i in range(k):
  plt.scatter(x[y== i,0],x[y==i,1],label=f'Cluster{i}')
plt.scatter(model.clusters_centers_[:,0],model.clusters_centers_[:,1],s=300,color='yellow',label='Centroids')
plt.legend()



